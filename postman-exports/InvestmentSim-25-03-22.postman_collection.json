{
	"info": {
		"_postman_id": "0df0bd50-fd55-4588-aa51-90426e28a7d5",
		"name": "InvestmentSim",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "get status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"tuto pom\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "post user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.username).to.eql(\"TOM\");\r",
									"    pm.environment.set(\"userId\", jsonData.id);\r",
									"    pm.environment.set(\"username\", jsonData.username);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"TOM\",\r\n    \"email\": \"tom@gmail.com\",\r\n    \"password\": \"qwerty\",\r\n    \"role\": \"CLIENT\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let id = pm.environment.get(\"userId\");\r",
									"    let username = pm.environment.get(\"username\");\r",
									"    pm.expect(jsonData.id).to.eql(id);\r",
									"    pm.expect(jsonData.username).to.eql(username);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/users/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Simulations",
			"item": [
				{
					"name": "get status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"tuto pom\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "post simulation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let id = pm.environment.get(\"userId\");\r",
									"    pm.expect(jsonData.user.id).to.eql(id);\r",
									"    pm.environment.set(\"simulationId\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{userId}},\r\n    \"description\": \"{{username}}'s Simulation\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/simulations",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"simulations"
							]
						}
					},
					"response": []
				},
				{
					"name": "get simulation by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let id = pm.environment.get(\"simulationId\");\r",
									"    pm.expect(jsonData.id).to.eql(id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/simulations/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"simulations",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{simulationId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get simulations by user id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/simulations/?userId={{userId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"simulations",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get simulations",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/simulations",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"simulations"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete simulation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let id = pm.environment.get(\"simulationId\");\r",
									"    pm.expect(jsonData.id).to.eql(id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/simulations/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"simulations",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{simulationId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Assets",
			"item": [
				{
					"name": "get status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"tuto pom\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "post asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.environment.set(\"assetId\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"description\": \"simple asset - {{simulationId}}\",\r\n    \"income\": 400,\r\n    \"value\": 80000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/assets/?simulationId={{simulationId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"assets",
								""
							],
							"query": [
								{
									"key": "simulationId",
									"value": "{{simulationId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get assets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/assets",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "get asset by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let id = pm.environment.get(\"assetId\");\r",
									"    pm.expect(jsonData.id).to.eql(id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/assets/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"assets",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{assetId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete asset",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let id = pm.environment.get(\"assetId\");\r",
									"    pm.expect(jsonData.id).to.eql(id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/assets/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"assets",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{assetId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Liabilities",
			"item": [
				{
					"name": "get status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"tuto pom\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/status",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "post liability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.environment.set(\"liabilityId\", jsonData.id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"assetId\": {{assetId}},\r\n    \"description\": \"simple liability - {{assetId}}\",\r\n    \"expense\": 75\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/liabilities/?assetId={{assetId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"liabilities",
								""
							],
							"query": [
								{
									"key": "assetId",
									"value": "{{assetId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get liabilities",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/liabilities",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"liabilities"
							]
						}
					},
					"response": []
				},
				{
					"name": "get liability by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let id = pm.environment.get(\"liabilityId\");\r",
									"    pm.expect(jsonData.id).to.eql(id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/liabilities/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"liabilities",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{liabilityId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "delete liability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body is not empty\", function () {\r",
									"    pm.response.to.have.body();\r",
									"});\r",
									"\r",
									"pm.test(\"Body is coherent\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let id = pm.environment.get(\"liabilityId\");\r",
									"    pm.expect(jsonData.id).to.eql(id);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/api/liabilities/:id",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"liabilities",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{liabilityId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "password",
				"value": "admin",
				"type": "string"
			},
			{
				"key": "username",
				"value": "admin",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://localhost:8080"
		}
	]
}